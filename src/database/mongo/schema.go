package database

// MongoDB provides the capability to perform schema validation during
// updates and insertions. Schema validation ensures that all documents
// in a collection follow a defined set of rules, such as conforming to
// a specific shape or only allowing a specified range of values in fields.
//
// https://docs.mongodb.com/compass/current/validation/

// BSON simply stands for “Binary JSON,” and that’s exactly what it was
// invented to be. BSON’s binary structure encodes type and length
// information, which allows it to be parsed much more quickly.
//
// https://www.mongodb.com/json-and-bson
import "go.mongodb.org/mongo-driver/bson"

// Get schema by name
func getSchema(name string) bson.M {
	var schema bson.M
	switch name {
	case "cardflix":
		schema = cardflixSchema
		break
	default:
		return nil
	}

	// Return schema
	return bson.M{
		"$jsonSchema": schema,
	}
}

// All collections from database
var collections []string = []string{
	"cardflix",
	"users",
	"products",
}

// Keywords available in jsonSchema.
// See here: https://docs.mongodb.com/manual/reference/operator/query/jsonSchema/#available-keywords

// Cardflix data scheme for validating data entry in the collection.
// The scheme is formatted in bson (bson.M - Map)
var cardflixSchema = bson.M{
	"bsonType":             "object",
	"required":             []string{"title", "description", "cover", "modules"},
	"additionalProperties": false,
	"properties": bson.M{
		// You need the _id, as Mongo internally injects an id
		// object generated by it, this function is automatics.
		"_id": bson.M{
			"bsonType": "objectId",
		},
		"title": bson.M{
			"bsonType":    "string",
			"minLength":   4,
			"maxLength":   30,
			"description": "Must be a string",
		},
		"description": bson.M{
			"bsonType":    "string",
			"minLength":   10,
			"maxLength":   300,
			"description": "Must be a string",
		},
		"cover": bson.M{
			"bsonType":    "string",
			"minLength":   8,
			"maxLength":   100,
			"description": "Must be a URL to a image",
		},
		"modules": bson.M{
			"bsonType":    []string{"array"},
			"uniqueItems": true,
			"items":       moduleSchema,
		},
	},
}

var moduleSchema = bson.M{
	"bsonType":             "object",
	"required":             []string{"level", "description", "frequency", "exercises"},
	"additionalProperties": false,
	"properties": bson.M{
		"level": bson.M{
			"enum":        []string{"LIGHT", "SOFT", "HADR"},
			"description": "Can only be either 'LIGHT', 'SOFT' or 'HARD'",
		},
		"description": bson.M{
			"bsonType":    "string",
			"minLength":   50,
			"maxLength":   500,
			"description": "Must have a minimum of 50 characters and a maximum of 500 characters",
		},
		"frequency": bson.M{
			"bsonType":             "object",
			"required":             []string{"repetition", "series"},
			"additionalProperties": false,
			"properties": bson.M{
				"repetition": bson.M{
					"bsonType":    "int",
					"minimum":     1,
					"maximum":     30,
					"description": "Must be an integer in [ 1, 30 ] and is required",
				},
				"series": bson.M{
					"bsonType":    "int",
					"minimum":     1,
					"maximum":     10,
					"description": "Must be an integer in [ 1, 10 ] and is required",
				},
			},
		},
		"exercises": bson.M{
			"bsonType":    []string{"array"},
			"uniqueItems": true,
			"items":       exerciseSchema,
		},
	},
}

// Exercise data schema for validating data entry in the collection.
// The schema is formatted in bson (bson.M - Map)
var exerciseSchema = bson.M{
	"bsonType":             "object",
	"required":             []string{"order", "name"},
	"additionalProperties": false,
	"properties": bson.M{
		"order": bson.M{
			"bsonType":    "int",
			"minimum":     0,
			"maximum":     10,
			"description": "Must be an integer in [ 1, 10 ] and is required",
		},
		"name": bson.M{
			"bsonType":    "string",
			"minLength":   8,
			"maxLength":   80,
			"description": "Must have a minimum of 8 characters and a maximum of 80 characters",
		},
		"metadata": bson.M{
			"bsonType":    []string{"array"},
			"uniqueItems": true,
			"items": bson.M{
				"bsonType": []string{"string"},
			},
		},
	},
}
