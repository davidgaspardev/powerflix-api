// Database

package database

import (
	"context"
	"fmt"
	"log"
	"net/url"
	"os"
	"sync"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type _Mongo struct {
	client   *mongo.Client
	database *mongo.Database
	context  *context.Context
}

// Single instance of the Mongo database
var instance _Mongo
var once sync.Once

// Initialize single instance
func init() {
	fmt.Println("[ file: mongo.go ] init method called")
	once.Do(func() {
		instance = _Mongo{}

		var ctx context.Context = context.Background()

		// Getting environment variables
		username := os.Getenv("USER")
		password := os.Getenv("PASS")
		database := os.Getenv("DB")

		// Mounting url to mongo database
		mongoURI := fmt.Sprintf("mongodb+srv://%s:%s@cluster0.rwqjl.mongodb.net", username, url.QueryEscape(password))

		var client, err = mongo.Connect(context.Background(), options.Client().ApplyURI(mongoURI))
		if err != nil {
			log.Fatal(err)
		}

		// Pass objects to instance
		instance.client = client
		instance.database = client.Database(database)
		instance.context = &ctx

		// Get all existing collection in database
		var currentCollections, erro = instance.database.ListCollectionNames(*instance.context, bson.D{})
		if erro != nil {
			log.Fatal(erro)
		}
		for i := 0; i < len(collections); i++ {
			// Check if the collection already exists in the specific database, if it does not exist, it is to
			// create a database with validation forgetting regarding the collection.
			var collectionAlreadyExists bool = false
			for _, currentCollection := range currentCollections {
				if currentCollection == collections[i] {
					collectionAlreadyExists = true
					break
				}
			}

			if collectionAlreadyExists {
				continue
			}

			var options = options.CreateCollection().SetValidator(getSchema(collections[i]))
			var err = instance.database.CreateCollection(*instance.context, collections[i], options)
			if err != nil {
				log.Fatal(err)
			}
		}
	})
}

// Add data in the Mongo database
func AddData(collectionName string, data interface{}) (string, error) {
	var result, err = instance.database.Collection(collectionName).InsertOne(*instance.context, data)
	if err != nil {
		return "", err
	}

	// Return obejct id generated by Mondodb
	return result.InsertedID.(primitive.ObjectID).Hex(), nil
}

// Get all data from Mongo database
func GetAllData(collectionName string) []bson.M {
	var result []bson.M = make([]bson.M, 0)

	fmt.Printf("[ GetAllData ] Collection name: %s\n", collectionName)

	// Read datas from database
	var cursor, err = instance.database.Collection(collectionName).Find(*instance.context, bson.M{})
	if err != nil {
		fmt.Printf("[ GetAllData ] Error in 'Find' method from 'Collection': %s\n", err.Error())
		log.Fatal(err)
	}
	defer cursor.Close(*instance.context)

	// cursor.All(*instance.context, &data)

	// Convert data readed
	for cursor.Next(*instance.context) {
		var data bson.M
		var err = cursor.Decode(&data)
		if err != nil {
			fmt.Printf("%v\n", err)
			log.Fatal(err)
		}
		result = append(result, data)
	}

	// Return
	return result
}

// Disconnect from Mongo database
func (db *_Mongo) Disconnect() {
	var err error = (*instance.client).Disconnect(*instance.context)
	if err == nil {
		log.Fatal(err)
	}
	(*instance.context).Done()
}
